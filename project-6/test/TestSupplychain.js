// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const SupplyChain = artifacts.require('SupplyChain')
// import package to test event emissions
const truffleAssert = require('truffle-assertions')

contract('SupplyChain', function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  let sku = 1
  let upc = 1
  const ownerID = accounts[0]
  const originManufacturerName = 'Bosch'
  const originPlant = 'Aurich'
  const equipmentID = 1
  const componentNotes = 'Best parts for Galleys'
  var componentState = 0
  const supplierID = accounts[1]
  const transporterID = accounts[2]
  const manufacturerID = accounts[3]
  const customerID = accounts[4]
  const emptyAddress = '0x00000000000000000000000000000000000000'

  console.log('ganache-cli accounts used here...')
  console.log('Contract Owner: accounts[0] ', accounts[0])
  console.log('Supplier: accounts[1] ', accounts[1])
  console.log('Transporter: accounts[2] ', accounts[2])
  console.log('Manufacturer: accounts[3] ', accounts[3])
  console.log('Customer: accounts[4] ', accounts[4])
  // const supplyChain = SupplyChain.deployed()
  // supplyChain.then(result => console.log(result.contract.events))
  // 1st test
  it('can add a Supplier Role to an address', async () => {
    const supplyChain = await SupplyChain.deployed()
    assert.equal(await supplyChain.isSupplier(supplierID), false)
    await supplyChain.addSupplier(supplierID)
    assert.equal(await supplyChain.isSupplier(supplierID), true)
  })

  // 2nd Test
  it('can renounce a Supplier role', async () => {
    const supplyChain = await SupplyChain.deployed()
    assert.equal(await supplyChain.isSupplier(ownerID), true)
    await supplyChain.renounceSupplier({ from: ownerID })
    assert.equal(await supplyChain.isSupplier(ownerID), false)
  })
  // 3rd Test
  it('receiveComponent(): a supplier can receive a component', async () => {
    const supplyChain = await SupplyChain.deployed()

    // Mark a Component as received by calling function receiveComponent()
    const tx = await supplyChain.receiveComponent(
      upc,
      originManufacturerName,
      originPlant,
      equipmentID,
      componentNotes,
      { from: supplierID })

    // Retrieve the just now saved Componnent from blockchain by calling function fetchItem()
    const resultBuffer = await supplyChain.fetchComponent.call(upc)

    // Verify the result set
    assert.equal(resultBuffer[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBuffer[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBuffer[2], supplierID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultBuffer[3], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
    assert.equal(resultBuffer[4], originPlant, 'Error: Missing or Invalid originPlant')
    assert.equal(resultBuffer[5], equipmentID, 'Error: Missing or Invalid equipmentID')
    assert.equal(resultBuffer[6], componentNotes, 'Error: Missing or Invalid componentsNotes')
    assert.equal(resultBuffer[7], 6, 'Error: Missing or Invalid componentState')
    assert.equal(resultBuffer[8], supplierID, 'Error: Missing or Invalid supplierID')
    assert.equal(resultBuffer[9], componentState, 'Error: Missing or Invalid componentState')
    // check for event emission:
    truffleAssert.eventEmitted(tx, 'Received', ev => {
      return ev.asset === 'Component' && ev.id == 1
    })
  })
/*
    // 2nd Test
    it('Testing smart contract function processItem() that allows a farmer to process coffee', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Processed()


        // Mark an item as Processed by calling function processtItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 3rd Test
    it('Testing smart contract function packItem() that allows a farmer to pack coffee', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Packed()


        // Mark an item as Packed by calling function packItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 4th Test
    it('Testing smart contract function sellItem() that allows a farmer to sell coffee', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event ForSale()


        // Mark an item as ForSale by calling function sellItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 5th Test
    it('Testing smart contract function buyItem() that allows a distributor to buy coffee', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Sold()
        var event = supplyChain.Sold()


        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 6th Test
    it('Testing smart contract function shipItem() that allows a distributor to ship coffee', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Shipped()


        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 7th Test
    it('Testing smart contract function receiveItem() that allows a retailer to mark coffee received', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Received()


        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 8th Test
    it('Testing smart contract function purchaseItem() that allows a consumer to purchase coffee', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Purchased()


        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })

    // 9th Test
    it('Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set:

    })

    // 10th Test
    it('Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set:

    })
*/
})
