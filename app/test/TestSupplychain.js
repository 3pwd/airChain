// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const SupplyChain = artifacts.require('SupplyChain')
// import package to test event emissions
const truffleAssert = require('truffle-assertions')

contract('SupplyChain', function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  const aircraftPrice = 100000000
  const equipmentPrice = 10
  const equipmentUPC = 1
  const componentUPC = 2
  const ownerID = accounts[0]
  const originManufacturerName = 'Bosch'
  const originPlant = 'Aurich'
  const componentNotes = 'Best parts for Galleys'
  var componentState = 0
  const supplierID = accounts[1]
  const transporterID = accounts[2]
  const manufacturerID = accounts[3]
  const customerID = accounts[4]
  const emptyAddress = '0x0000000000000000000000000000000000000000'

  console.log('ganache-cli accounts used here...')
  console.log('Contract Owner: accounts[0] ', accounts[0])
  console.log('Supplier: accounts[1] ', accounts[1])
  console.log('Transporter: accounts[2] ', accounts[2])
  console.log('Manufacturer: accounts[3] ', accounts[3])
  console.log('Customer: accounts[4] ', accounts[4])

  it('can add a Manufacturer Role to an address', async () => {
    const supplyChain = await SupplyChain.deployed()
    assert.equal(await supplyChain.isManufacturer(manufacturerID), false)
    const tx = await supplyChain.addManufacturer(manufacturerID, 'I am a manufacturer')
    assert.equal(await supplyChain.isManufacturer(manufacturerID), true)
    assert.equal(await supplyChain.getNameManufacturer(manufacturerID), 'I am a manufacturer')
    truffleAssert.eventEmitted(tx, 'ManufacturerAdded', ev => {
      return ev.account === manufacturerID && ev.name === 'I am a manufacturer'
    })
  })

  it('can renounce a Manufacturer role', async () => {
    const supplyChain = await SupplyChain.deployed()
    assert.equal(await supplyChain.isManufacturer(ownerID), true)
    await supplyChain.renounceManufacturer({ from: ownerID })
    assert.equal(await supplyChain.isManufacturer(ownerID), false)
  })

  it('can add a Supplier Role to an address', async () => {
    const supplyChain = await SupplyChain.deployed()
    assert.equal(await supplyChain.isSupplier(supplierID), false)
    const tx = await supplyChain.addSupplier(supplierID, 'I am a supplier')
    assert.equal(await supplyChain.isSupplier(supplierID), true)
    assert.equal(await supplyChain.getNameSupplier(supplierID), 'I am a supplier')
    truffleAssert.eventEmitted(tx, 'SupplierAdded', ev => {
      return ev.account === supplierID && ev.name === 'I am a supplier'
    })
  })

  it('can renounce a Supplier role', async () => {
    const supplyChain = await SupplyChain.deployed()
    assert.equal(await supplyChain.isSupplier(ownerID), true)
    await supplyChain.renounceSupplier({ from: ownerID })
    assert.equal(await supplyChain.isSupplier(ownerID), false)
  })

  it('can add a Customer Role to an address', async () => {
    const supplyChain = await SupplyChain.deployed()
    assert.equal(await supplyChain.isCustomer(customerID), false)
    const tx = await supplyChain.addCustomer(customerID, 'I am a customer')
    assert.equal(await supplyChain.isCustomer(customerID), true)
    assert.equal(await supplyChain.getNameCustomer(customerID), 'I am a customer')
    truffleAssert.eventEmitted(tx, 'CustomerAdded', ev => {
      return ev.account === customerID && ev.name === 'I am a customer'
    })
  })

  it('can renounce a Customer role', async () => {
    const supplyChain = await SupplyChain.deployed()
    assert.equal(await supplyChain.isCustomer(ownerID), true)
    await supplyChain.renounceCustomer({ from: ownerID })
    assert.equal(await supplyChain.isCustomer(ownerID), false)
  })

  it('can add a Transporter Role to an address', async () => {
    const supplyChain = await SupplyChain.deployed()
    assert.equal(await supplyChain.isTransporter(transporterID), false)
    const tx = await supplyChain.addTransporter(transporterID, 'I am a transporter')
    assert.equal(await supplyChain.isTransporter(transporterID), true)
    assert.equal(await supplyChain.getNameTransporter(transporterID), 'I am a transporter')
    truffleAssert.eventEmitted(tx, 'TransporterAdded', ev => {
      return ev.account === transporterID && ev.name === 'I am a transporter'
    })
  })

  it('can renounce a Transporter role', async () => {
    const supplyChain = await SupplyChain.deployed()
    assert.equal(await supplyChain.isTransporter(ownerID), true)
    await supplyChain.renounceTransporter({ from: ownerID })
    assert.equal(await supplyChain.isTransporter(ownerID), false)
  })

  it('a customer can order an aircraft', async () => {
    const supplyChain = await SupplyChain.deployed()
    // Supplier mark AC as ordered
    const tx = await supplyChain.orderAircraft(
      equipmentUPC,
      manufacturerID,
      { from: customerID })

    // Fetch AC
    const aircraft = await supplyChain.fetchAircraft(1)

    // Checks
    assert.equal(aircraft[0], 1, 'Error: invalid or missing MSN')
    assert.equal(aircraft[1], equipmentUPC, 'Error: missing or invalid equipment upc')
    assert.equal(aircraft[2], aircraftPrice, 'Error: missing or invalid aircraft price')
    assert.equal(aircraft[3], 1, 'Error: state should ordered (1) at this stage')
    assert.equal(aircraft[4], emptyAddress, 'Error: ownerID should be empty at this stage')
    assert.equal(aircraft[5], manufacturerID, 'Error: Missing or Invalid manufacturerID')
    assert.equal(aircraft[6], '', 'Error: originPlant should be empty at this stage')
    assert.equal(aircraft[7], '', 'Error: aircraftNotes should be empty at this stage')
    assert.equal(aircraft[8], customerID, 'Error: Missing or Invalid customerID')

    // Event check
    truffleAssert.eventEmitted(tx, 'Ordered', event => {
      return event.asset === 'Aircraft', event.id == 1
    })
  })

  it('a manufacturer can order an equipment', async () => {
    const supplyChain = await SupplyChain.deployed()

    // Manufacturer marks equipment as ordered
    const tx = await supplyChain.orderEquipment(
      equipmentUPC,
      supplierID,
      1,
      { from: manufacturerID })

    // Fetch equipment
    const equipment = await supplyChain.fetchEquipment(equipmentUPC)

    // Checks
    assert.equal(equipment[0], equipmentUPC, 'Error: invalid equipment UPC')
    assert.equal(equipment[1], 0, 'Error: componentID should be 0 at this stage')
    assert.equal(equipment[2], 1, 'Error: invalid or missing msn')
    assert.equal(equipment[3], equipmentPrice, 'Error: Missing or Invalid price')
    assert.equal(equipment[4], 1, 'Error: state should be ordered at this stage')
    assert.equal(equipment[5], emptyAddress, 'Error: owner address should be empty at this stage')
    assert.equal(equipment[6], supplierID, 'Error: Missing or Invalid supplierID')
    assert.equal(equipment[7], '', 'Error: originPlant should be empty at this stage')
    assert.equal(equipment[8], '', 'Error: equipmentNotes should be empty at this stage')
    assert.equal(equipment[9], emptyAddress, 'Error: transporter address should be empty at this stage')
    assert.equal(equipment[10], manufacturerID, 'Error: missing or invalid manufacturer address')

    // check event
    truffleAssert.eventEmitted(tx, 'Ordered', ev => {
      return ev.asset === 'Equipment' && ev.id == equipmentUPC
    })
  })
/*
  // equipment upc 1
  // component upc 2
  // upc = 2
  it('a supplier can receive a component', async () => {
    const supplyChain = await SupplyChain.deployed()
    // Mark a Component as received by calling function receiveComponent()
    const tx = await supplyChain.receiveComponent(
      upc,
      originManufacturerName,
      originPlant,
      upc - 1,
      { from: supplierID })
    // Retrieve saved Component from blockchain with fetchComponent()
    const resultFetch = await supplyChain.fetchComponent.call(upc)

    // Verify the result set
    assert.equal(resultFetch[0], upc, 'Error: Invalid item UPC')
    assert.equal(resultFetch[1], supplierID, 'Error: Missing or Invalid ownerID')
    assert.equal(resultFetch[2], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
    assert.equal(resultFetch[3], originPlant, 'Error: Missing or Invalid originPlant')
    assert.equal(resultFetch[4], upc - 1, 'Error: Missing or Invalid equipmentID')
    assert.equal(resultFetch[5], 6, 'Error: Missing or Invalid componentState')
    assert.equal(resultFetch[6], supplierID, 'Error: Missing or Invalid supplierID')
    assert.equal(resultFetch[7], componentState, 'Error: Missing or Invalid componentState')
    // check for event emission:
    truffleAssert.eventEmitted(tx, 'Received', ev => {
      return ev.asset === 'Component' && ev.id == upc
    })
    upc++
  })

  // equipment: upc 1
  // component upc 2
  // upc = 3
  it('a supplier can process a component', async () => {
    const supplyChain = await SupplyChain.deployed()
    // Mark a component as integrated and an equipment as assembled:
    const tx = await supplyChain.processComponent(2, { from: supplierID })
    const equipment = await supplyChain.fetchEquipment(1)
    const component = await supplyChain.fetchComponent(2)

    assert.equal(equipment[6], 2, "Error: missing or invalid equipment state. Should be 'Assembled'")
    assert.equal(component[5], 7, "Error: missing or invalid equipment state. Should be 'Integrated'")
    truffleAssert.eventEmitted(tx, 'Assembled', event => {
      return event.asset === 'Equipment' && event.id == 1
    })
    truffleAssert.eventEmitted(tx, 'Integrated', event => {
      return event.asset === 'Component' && event.id == 2
    })
  })

  it('a manufacturer can prepare the structure of an aircraft', async () => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event


    // Watch the emitted event ForSale()


    // Mark an item as ForSale by calling function sellItem()


    // Retrieve the just now saved item from blockchain by calling function fetchItem()


    // Verify the result set

  })
/*
    it('Testing smart contract function buyItem() that allows a distributor to buy coffee', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Sold()
        var event = supplyChain.Sold()


        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })
/*
    it('Testing smart contract function shipItem() that allows a distributor to ship coffee', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Shipped()


        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })
/*
    it('Testing smart contract function receiveItem() that allows a retailer to mark coffee received', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Received()


        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })
/*
    it('Testing smart contract function purchaseItem() that allows a consumer to purchase coffee', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event


        // Watch the emitted event Purchased()


        // Mark an item as Sold by calling function buyItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set

    })
/*
    it('Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set:

    })
/*
    it('Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain', async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set:

    })
*/
})
